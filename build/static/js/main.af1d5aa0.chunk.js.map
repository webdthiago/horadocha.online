{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","definitions","day","hour","minute","useState","weekday","setWeekday","part1","setPart1","part2","setPart2","left","setLeft","sec","setSec","useEffect","_weekday","moment","_part1","_left","second","diff","setInterval","_sec","format","Fragment","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMA0DeA,G,MAtDH,WACJ,IAAAC,EAAc,CAAEC,IAAK,EAAGC,KAAM,EAAGC,OAAQ,GAAzC,EACoBC,oBAAS,GAD7B,mBACHC,EADG,KACMC,EADN,OAEgBF,mBAAS,IAFzB,mBAEHG,EAFG,KAEIC,EAFJ,OAGgBJ,mBAAS,qBAHzB,mBAGHK,EAHG,KAGIC,EAHJ,OAIcN,mBAAS,IAJvB,mBAIHO,EAJG,KAIGC,EAJH,OAKYR,mBAAS,GALrB,mBAKHS,EALG,KAKEC,EALF,KAwCN,OAjCAC,qBAAU,WACR,IAAMC,EAAWC,MAASZ,YAAcL,EAAYC,IAClDiB,EAASF,EAAQ,iEAOnB,GAHAV,EAAWU,GACXR,EAASU,GAELF,EAAU,CACZ,IAIEG,EAJcF,MACXf,KAAKF,EAAYE,MACjBC,OAAOH,EAAYG,QACnBiB,OAAO,MACMC,KAAKJ,MAAU,WAC7BE,GAAS,GACXP,EAAQO,GACRG,aAAY,WACV,IAAMC,GAAuC,GAA/BN,MAASO,OAAO,MAAQ,IACtCV,EAAgB,KAATS,EAAc,EAAIA,KACxB,MACMJ,IAAU,IACnBb,GAAW,GACXE,EAAS,oFAITI,EAAQ,QACRF,EAAS,gBAAD,QAA0B,EAATS,QAG5B,CAACd,EAASE,EAAOE,EAAOE,EAAME,EAAKb,IAGpC,2BACGO,EAAO,IACPF,GACC,kBAAC,IAAMoB,SAAP,KACE,6BADF,SAESd,EAFT,IAEgBe,SAASf,EAAM,KAAO,GAAK,8BAAOE,GAFlD,IAEgEJ,MCzCpDkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2E3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.af1d5aa0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const definitions = { day: 6, hour: 5, minute: 0 },\n    [weekday, setWeekday] = useState(false),\n    [part1, setPart1] = useState(\"\"),\n    [part2, setPart2] = useState(\"para faltar zero.\"),\n    [left, setLeft] = useState(\"\"),\n    [sec, setSec] = useState(0);\n\n  useEffect(() => {\n    const _weekday = moment().weekday() === definitions.day,\n      _part1 = _weekday\n        ? `Hoje tem a hora do chá.`\n        : `Que pena, hoje não tem chá.`;\n\n    setWeekday(_weekday);\n    setPart1(_part1);\n\n    if (_weekday) {\n      const timeTea = moment()\n          .hour(definitions.hour)\n          .minute(definitions.minute)\n          .second(\"00\"),\n        _left = timeTea.diff(moment(), \"minutes\");\n      if (_left >= 0) {\n        setLeft(_left);\n        setInterval(() => {\n          const _sec = (moment().format(\"ss\") - 60) * -1;\n          setSec(_sec === 60 ? 0 : _sec);\n        }, 1000);\n      } else if (_left <= -30) {\n        setWeekday(false);\n        setPart1(\n          `Eeeeeeeita, você perdeu a hora do chá? Pede desculpa lá no Slack vai.`\n        );\n      } else {\n        setLeft(\"zero\");\n        setPart2(`para atrasar ${_left * -1}`);\n      }\n    }\n  }, [weekday, part1, part2, left, sec, definitions]);\n\n  return (\n    <p>\n      {part1}{\" \"}\n      {weekday && (\n        <React.Fragment>\n          <br />\n          Falta {left} {parseInt(left, 10) >= 0 && <span>{sec}</span>} {part2}\n        </React.Fragment>\n      )}\n    </p>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {})\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {}\n      }\n    })\n    .catch(() => {})\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {})\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}